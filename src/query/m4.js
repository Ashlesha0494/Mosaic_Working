import { bin } from './bin.js';
import { list } from './list.js';

export function m4(input, x, y, xb, lb, ub, width) {
  const xl = list(
    `MIN(${x})`,
    `MAX(${x})`,
    `ARG_MIN(${x}, ${y})`,
    `ARG_MAX(${x}, ${y})`
  );
  const yl = list(
    `ARG_MIN(${y}, ${x})`,
    `ARG_MAX(${y}, ${x})`,
    `MIN(${y})`,
    `MAX(${y})`
  );
  return `SELECT DISTINCT
  UNNEST(${xl}) AS ${x},
  UNNEST(${yl}) AS ${y}
FROM ${input}
GROUP BY (${bin(xb, lb, ub, width)})
ORDER BY ${x};`
}

/**
QUERY
  SELECT DISTINCT
    UNNEST(list_value(MIN(TRANSACTION_DT), MAX(TRANSACTION_DT), ARG_MIN(TRANSACTION_DT, TRANSACTION_AMT), ARG_MAX(TRANSACTION_DT, TRANSACTION_AMT))) AS TRANSACTION_DT,
    UNNEST(list_value(ARG_MIN(TRANSACTION_AMT, TRANSACTION_DT), ARG_MAX(TRANSACTION_AMT, TRANSACTION_DT), MIN(TRANSACTION_AMT), MAX(TRANSACTION_AMT))) AS TRANSACTION_AMT
  FROM ts
  GROUP BY (FLOOR(100 * CAST(epoch(TRANSACTION_DT) - 991267200 AS DOUBLE) / CAST(1672272000 - 991267200 AS DOUBLE)))
  ORDER BY TRANSACTION_DT;

QUERY
  SELECT DISTINCT
    UNNEST(list_value(MIN(TRANSACTION_DT), MAX(TRANSACTION_DT), ARG_MIN(TRANSACTION_DT, TRANSACTION_AMT), ARG_MAX(TRANSACTION_DT, TRANSACTION_AMT))) AS TRANSACTION_DT,
    UNNEST(list_value(ARG_MIN(TRANSACTION_AMT, TRANSACTION_DT), ARG_MAX(TRANSACTION_AMT, TRANSACTION_DT), MIN(TRANSACTION_AMT), MAX(TRANSACTION_AMT))) AS TRANSACTION_AMT
  FROM ts
  GROUP BY (FLOOR(100 * CAST(epoch(TRANSACTION_DT) - 991267200 AS DOUBLE) / CAST(1672272000 - 991267200 AS DOUBLE)))
  ORDER BY TRANSACTION_DT;

QUERY
  SELECT DISTINCT
    FLOOR(100 * CAST(epoch(TRANSACTION_DT) - 991267200 AS DOUBLE) / CAST(1672272000 - 991267200 AS DOUBLE)) AS k,
    UNNEST(list_value(MIN(TRANSACTION_DT), MAX(TRANSACTION_DT), ARG_MIN(TRANSACTION_DT, TRANSACTION_AMT), ARG_MAX(TRANSACTION_DT, TRANSACTION_AMT))) AS TRANSACTION_DT,
    UNNEST(list_value(ARG_MIN(TRANSACTION_AMT, TRANSACTION_DT), ARG_MAX(TRANSACTION_AMT, TRANSACTION_DT), MIN(TRANSACTION_AMT), MAX(TRANSACTION_AMT))) AS TRANSACTION_AMT
  FROM ts
  GROUP BY k
  ORDER BY TRANSACTION_DT;
 */